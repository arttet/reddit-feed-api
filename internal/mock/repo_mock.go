// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/arttet/reddit-feed-api/internal/app/reddit-feed-api/service/repository (interfaces: Repository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/arttet/reddit-feed-api/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreatePosts mocks base method.
func (m *MockRepository) CreatePosts(arg0 context.Context, arg1 model.Posts) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePosts", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePosts indicates an expected call of CreatePosts.
func (mr *MockRepositoryMockRecorder) CreatePosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePosts", reflect.TypeOf((*MockRepository)(nil).CreatePosts), arg0, arg1)
}

// GetPromotedPost mocks base method.
func (m *MockRepository) GetPromotedPost(arg0 context.Context) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromotedPost", arg0)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromotedPost indicates an expected call of GetPromotedPost.
func (mr *MockRepositoryMockRecorder) GetPromotedPost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromotedPost", reflect.TypeOf((*MockRepository)(nil).GetPromotedPost), arg0)
}

// ListPosts mocks base method.
func (m *MockRepository) ListPosts(arg0 context.Context, arg1, arg2 uint64) (model.Posts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPosts", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.Posts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPosts indicates an expected call of ListPosts.
func (mr *MockRepositoryMockRecorder) ListPosts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPosts", reflect.TypeOf((*MockRepository)(nil).ListPosts), arg0, arg1, arg2)
}
