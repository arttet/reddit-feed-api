// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package reddit_feed_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RedditFeedAPIServiceClient is the client API for RedditFeedAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedditFeedAPIServiceClient interface {
	// Create new posts
	CreatePostsV1(ctx context.Context, in *CreatePostsV1Request, opts ...grpc.CallOption) (*CreatePostsV1Response, error)
	// Generate a feed of posts
	GenerateFeedV1(ctx context.Context, in *GenerateFeedV1Request, opts ...grpc.CallOption) (*GenerateFeedV1Response, error)
}

type redditFeedAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRedditFeedAPIServiceClient(cc grpc.ClientConnInterface) RedditFeedAPIServiceClient {
	return &redditFeedAPIServiceClient{cc}
}

func (c *redditFeedAPIServiceClient) CreatePostsV1(ctx context.Context, in *CreatePostsV1Request, opts ...grpc.CallOption) (*CreatePostsV1Response, error) {
	out := new(CreatePostsV1Response)
	err := c.cc.Invoke(ctx, "/reddit.reddit_feed_api.v1.RedditFeedAPIService/CreatePostsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redditFeedAPIServiceClient) GenerateFeedV1(ctx context.Context, in *GenerateFeedV1Request, opts ...grpc.CallOption) (*GenerateFeedV1Response, error) {
	out := new(GenerateFeedV1Response)
	err := c.cc.Invoke(ctx, "/reddit.reddit_feed_api.v1.RedditFeedAPIService/GenerateFeedV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedditFeedAPIServiceServer is the server API for RedditFeedAPIService service.
// All implementations must embed UnimplementedRedditFeedAPIServiceServer
// for forward compatibility
type RedditFeedAPIServiceServer interface {
	// Create new posts
	CreatePostsV1(context.Context, *CreatePostsV1Request) (*CreatePostsV1Response, error)
	// Generate a feed of posts
	GenerateFeedV1(context.Context, *GenerateFeedV1Request) (*GenerateFeedV1Response, error)
	mustEmbedUnimplementedRedditFeedAPIServiceServer()
}

// UnimplementedRedditFeedAPIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRedditFeedAPIServiceServer struct {
}

func (UnimplementedRedditFeedAPIServiceServer) CreatePostsV1(context.Context, *CreatePostsV1Request) (*CreatePostsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePostsV1 not implemented")
}
func (UnimplementedRedditFeedAPIServiceServer) GenerateFeedV1(context.Context, *GenerateFeedV1Request) (*GenerateFeedV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateFeedV1 not implemented")
}
func (UnimplementedRedditFeedAPIServiceServer) mustEmbedUnimplementedRedditFeedAPIServiceServer() {}

// UnsafeRedditFeedAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedditFeedAPIServiceServer will
// result in compilation errors.
type UnsafeRedditFeedAPIServiceServer interface {
	mustEmbedUnimplementedRedditFeedAPIServiceServer()
}

func RegisterRedditFeedAPIServiceServer(s grpc.ServiceRegistrar, srv RedditFeedAPIServiceServer) {
	s.RegisterService(&RedditFeedAPIService_ServiceDesc, srv)
}

func _RedditFeedAPIService_CreatePostsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedditFeedAPIServiceServer).CreatePostsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reddit.reddit_feed_api.v1.RedditFeedAPIService/CreatePostsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedditFeedAPIServiceServer).CreatePostsV1(ctx, req.(*CreatePostsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedditFeedAPIService_GenerateFeedV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateFeedV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedditFeedAPIServiceServer).GenerateFeedV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reddit.reddit_feed_api.v1.RedditFeedAPIService/GenerateFeedV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedditFeedAPIServiceServer).GenerateFeedV1(ctx, req.(*GenerateFeedV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// RedditFeedAPIService_ServiceDesc is the grpc.ServiceDesc for RedditFeedAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedditFeedAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reddit.reddit_feed_api.v1.RedditFeedAPIService",
	HandlerType: (*RedditFeedAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePostsV1",
			Handler:    _RedditFeedAPIService_CreatePostsV1_Handler,
		},
		{
			MethodName: "GenerateFeedV1",
			Handler:    _RedditFeedAPIService_GenerateFeedV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reddit/reddit_feed_api/v1/reddit_feed_api.proto",
}
