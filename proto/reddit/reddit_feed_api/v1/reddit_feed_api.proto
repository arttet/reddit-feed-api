syntax = "proto3";

package reddit.reddit_feed_api.v1;

import "google/api/annotations.proto";
import "options/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/arttet/reddit-feed-api/pkg/reddit-feed-api/v1;reddit_feed_api";

option (transformer.go_repo_package)     = "model";
option (transformer.go_protobuf_package) = "pb";
option (transformer.go_models_file_path) = "internal/model/post.go";

///////////////////////////////////////////////////////////////////////////////

// clang-format off
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Reddit Feed API";
    version: "1.0";
    license: {
      name: "MIT";
      url: "https://github.com/arttet/reddit-feed-api/blob/main/LICENSE";
    };
  };
};
// clang-format on

///////////////////////////////////////////////////////////////////////////////

service RedditFeedAPIService {
  // Create new posts
  rpc CreatePostsV1(CreatePostsV1Request) returns (CreatePostsV1Response) {
    option (google.api.http) = {
      post: "/v1/posts"
    };
  }

  // Generate a feed of posts
  rpc GenerateFeedV1(GenerateFeedV1Request) returns (GenerateFeedV1Response) {
    option (google.api.http) = {
      get: "/v1/feed/{page_id}"
    };
  }
}

///////////////////////////////////////////////////////////////////////////////

message CreatePostsV1Request {
  repeated Post posts = 1
      [(validate.rules).repeated = { min_items: 1, max_items: 1024 }];
}

message CreatePostsV1Response {
  int64 number_of_created_posts = 1;
}

///////////////////////////////////////////////////////////////////////////////

message GenerateFeedV1Request {
  uint64 page_id = 1 [(validate.rules).uint64.gte = 1];
}

message GenerateFeedV1Response {
  repeated Post posts = 1;
}

///////////////////////////////////////////////////////////////////////////////

message Post {
  option (transformer.go_struct) = "Post";
  string title                   = 1;
  string author                  = 2 [(validate.rules).string = {
                     max_bytes: 11,
                     prefix: "t2_",
                     pattern: "^t2_[a-z0-9]{8}$",
  }];
  string subreddit               = 3;
  oneof  post_type {
    string link    = 4 [(validate.rules).string.uri_ref = true];
    string content = 5;
  }
  uint64 score             = 6 [(validate.rules).uint64.gte = 0];
  bool   promoted          = 7;
  bool   not_safe_for_work = 8;
}
